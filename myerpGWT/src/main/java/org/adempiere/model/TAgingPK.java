package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.TAging
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class TAgingPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.TAging"); }
		catch(Exception e) {}
	}

	public Integer aDPInstanceID;
	public Integer cBPartnerID;
	public Integer cCurrencyID;
	public Integer cInvoiceID;
	public Integer cInvoicePayScheduleID;

	public TAgingPK() {
	}

	public TAgingPK(String str) {
		fromString(str);
	}

	public Integer getADPInstanceID() {
		return aDPInstanceID;
	}

	public void setADPInstanceID(Integer aDPInstanceID) {
		this.aDPInstanceID = aDPInstanceID;
	}

	public Integer getCBPartnerID() {
		return cBPartnerID;
	}

	public void setCBPartnerID(Integer cBPartnerID) {
		this.cBPartnerID = cBPartnerID;
	}

	public Integer getCCurrencyID() {
		return cCurrencyID;
	}

	public void setCCurrencyID(Integer cCurrencyID) {
		this.cCurrencyID = cCurrencyID;
	}

	public Integer getCInvoiceID() {
		return cInvoiceID;
	}

	public void setCInvoiceID(Integer cInvoiceID) {
		this.cInvoiceID = cInvoiceID;
	}

	public Integer getCInvoicePayScheduleID() {
		return cInvoicePayScheduleID;
	}

	public void setCInvoicePayScheduleID(Integer cInvoicePayScheduleID) {
		this.cInvoicePayScheduleID = cInvoicePayScheduleID;
	}

	public String toString() {
		return String.valueOf(aDPInstanceID)
			+ "::" + String.valueOf(cBPartnerID)
			+ "::" + String.valueOf(cCurrencyID)
			+ "::" + String.valueOf(cInvoiceID)
			+ "::" + String.valueOf(cInvoicePayScheduleID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDPInstanceID == null) ? 0 : aDPInstanceID.hashCode());
		rs = rs * 37 + ((cBPartnerID == null) ? 0 : cBPartnerID.hashCode());
		rs = rs * 37 + ((cCurrencyID == null) ? 0 : cCurrencyID.hashCode());
		rs = rs * 37 + ((cInvoiceID == null) ? 0 : cInvoiceID.hashCode());
		rs = rs * 37 + ((cInvoicePayScheduleID == null) ? 0 : cInvoicePayScheduleID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		TAgingPK other = (TAgingPK) obj;
		return ((aDPInstanceID == null && other.aDPInstanceID == null)
			|| (aDPInstanceID != null && aDPInstanceID.equals(other.aDPInstanceID)))
			&& ((cBPartnerID == null && other.cBPartnerID == null)
			|| (cBPartnerID != null && cBPartnerID.equals(other.cBPartnerID)))
			&& ((cCurrencyID == null && other.cCurrencyID == null)
			|| (cCurrencyID != null && cCurrencyID.equals(other.cCurrencyID)))
			&& ((cInvoiceID == null && other.cInvoiceID == null)
			|| (cInvoiceID != null && cInvoiceID.equals(other.cInvoiceID)))
			&& ((cInvoicePayScheduleID == null && other.cInvoicePayScheduleID == null)
			|| (cInvoicePayScheduleID != null && cInvoicePayScheduleID.equals(other.cInvoicePayScheduleID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDPInstanceID = null;
		else
			aDPInstanceID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cBPartnerID = null;
		else
			cBPartnerID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cCurrencyID = null;
		else
			cCurrencyID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cInvoiceID = null;
		else
			cInvoiceID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cInvoicePayScheduleID = null;
		else
			cInvoicePayScheduleID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}