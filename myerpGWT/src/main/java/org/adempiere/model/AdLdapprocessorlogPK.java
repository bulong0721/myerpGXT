package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.AdLdapprocessorlog
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class AdLdapprocessorlogPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.AdLdapprocessorlog"); }
		catch(Exception e) {}
	}

	public Integer adLdapprocessorId;
	public Integer adLdapprocessorlogId;

	public AdLdapprocessorlogPK() {
	}

	public AdLdapprocessorlogPK(String str) {
		fromString(str);
	}

	public Integer getAdLdapprocessorId() {
		return adLdapprocessorId;
	}

	public void setAdLdapprocessorId(Integer adLdapprocessorId) {
		this.adLdapprocessorId = adLdapprocessorId;
	}

	public Integer getAdLdapprocessorlogId() {
		return adLdapprocessorlogId;
	}

	public void setAdLdapprocessorlogId(Integer adLdapprocessorlogId) {
		this.adLdapprocessorlogId = adLdapprocessorlogId;
	}

	public String toString() {
		return String.valueOf(adLdapprocessorId)
			+ "::" + String.valueOf(adLdapprocessorlogId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((adLdapprocessorId == null) ? 0 : adLdapprocessorId.hashCode());
		rs = rs * 37 + ((adLdapprocessorlogId == null) ? 0 : adLdapprocessorlogId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		AdLdapprocessorlogPK other = (AdLdapprocessorlogPK) obj;
		return ((adLdapprocessorId == null && other.adLdapprocessorId == null)
			|| (adLdapprocessorId != null && adLdapprocessorId.equals(other.adLdapprocessorId)))
			&& ((adLdapprocessorlogId == null && other.adLdapprocessorlogId == null)
			|| (adLdapprocessorlogId != null && adLdapprocessorlogId.equals(other.adLdapprocessorlogId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adLdapprocessorId = null;
		else
			adLdapprocessorId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adLdapprocessorlogId = null;
		else
			adLdapprocessorlogId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}