package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.ADDesktopTrl
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class ADDesktopTrlPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.ADDesktopTrl"); }
		catch(Exception e) {}
	}

	public Integer aDDesktopID;
	public String aDLanguage;

	public ADDesktopTrlPK() {
	}

	public ADDesktopTrlPK(String str) {
		fromString(str);
	}

	public Integer getADDesktopID() {
		return aDDesktopID;
	}

	public void setADDesktopID(Integer aDDesktopID) {
		this.aDDesktopID = aDDesktopID;
	}

	public String getADLanguage() {
		return aDLanguage;
	}

	public void setADLanguage(String aDLanguage) {
		this.aDLanguage = aDLanguage;
	}

	public String toString() {
		return String.valueOf(aDDesktopID)
			+ "::" + aDLanguage;
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDDesktopID == null) ? 0 : aDDesktopID.hashCode());
		rs = rs * 37 + ((aDLanguage == null) ? 0 : aDLanguage.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		ADDesktopTrlPK other = (ADDesktopTrlPK) obj;
		return ((aDDesktopID == null && other.aDDesktopID == null)
			|| (aDDesktopID != null && aDDesktopID.equals(other.aDDesktopID)))
			&& ((aDLanguage == null && other.aDLanguage == null)
			|| (aDLanguage != null && aDLanguage.equals(other.aDLanguage)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDDesktopID = null;
		else
			aDDesktopID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDLanguage = null;
		else
			aDLanguage = str;
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}