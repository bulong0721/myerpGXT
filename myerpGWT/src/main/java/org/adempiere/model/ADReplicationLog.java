package org.adempiere.model;

import javax.persistence.*;

/**
 * Auto-generated by:
 * org.adempiere.AdempiereCustomizer
 */
@Entity
@Table(name="ad_replication_log")
public class ADReplicationLog extends org.adempiere.common.ADEntityBase {
	private static final long serialVersionUID = 1L;
	private Integer aDClientID;
	private Integer aDOrgID;
	private Integer aDReplicationLogID;
	private Integer aDReplicationRunID;
	private Integer aDReplicationTableID;
	private Boolean active;
	private String created;
	private Integer createdBy;
	private String pMsg;
	private Boolean replicated;
	private String updated;
	private Integer updatedBy;

	public ADReplicationLog() {
	}

	public ADReplicationLog(Integer aDReplicationLogID) {
		this.aDReplicationLogID = aDReplicationLogID;
	}

	@Basic
	@Column(name="AD_CLIENT_ID", columnDefinition="INT", nullable=false)
	public Integer getADClientID() {
		return aDClientID;
	}

	public void setADClientID(Integer aDClientID) {
		this.aDClientID = aDClientID;
	}

	@Basic
	@Column(name="AD_ORG_ID", columnDefinition="INT", nullable=false)
	public Integer getADOrgID() {
		return aDOrgID;
	}

	public void setADOrgID(Integer aDOrgID) {
		this.aDOrgID = aDOrgID;
	}

	@Id
	@Column(name="AD_REPLICATION_LOG_ID", columnDefinition="INT")
	@TableGenerator(name = "PkGen_773", table = "ad_sequence", pkColumnName = "name", pkColumnValue = "AD_Replication_Log", valueColumnName = "currentnextsys", allocationSize = 1 )
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "PkGen_773")
	public Integer getADReplicationLogID() {
		return aDReplicationLogID;
	}

	public void setADReplicationLogID(Integer aDReplicationLogID) {
		this.aDReplicationLogID = aDReplicationLogID;
	}

	@Basic
	@Column(name="AD_REPLICATION_RUN_ID", columnDefinition="INT", nullable=false)
	public Integer getADReplicationRunID() {
		return aDReplicationRunID;
	}

	public void setADReplicationRunID(Integer aDReplicationRunID) {
		this.aDReplicationRunID = aDReplicationRunID;
	}

	@Basic
	@Column(name="AD_REPLICATIONTABLE_ID", columnDefinition="INT")
	public Integer getADReplicationTableID() {
		return aDReplicationTableID;
	}

	public void setADReplicationTableID(Integer aDReplicationTableID) {
		this.aDReplicationTableID = aDReplicationTableID;
	}

	@Basic
	@Column(name="ISACTIVE", nullable=false)
	public Boolean isActive() {
		return active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	@Basic
	@Column(columnDefinition="TIMESTAMP", nullable=false)
	public String getCreated() {
		return created;
	}

	public void setCreated(String created) {
		this.created = created;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Basic
	@Column(name="P_MSG", length=2000)
	public String getPMsg() {
		return pMsg;
	}

	public void setPMsg(String pMsg) {
		this.pMsg = pMsg;
	}

	@Basic
	@Column(name="ISREPLICATED", nullable=false)
	public Boolean isReplicated() {
		return replicated;
	}

	public void setReplicated(Boolean replicated) {
		this.replicated = replicated;
	}

	@Basic
	@Column(columnDefinition="TIMESTAMP", nullable=false)
	public String getUpdated() {
		return updated;
	}

	public void setUpdated(String updated) {
		this.updated = updated;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getUpdatedBy() {
		return updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}
}