package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.TReport
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class TReportPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.TReport"); }
		catch(Exception e) {}
	}

	public Integer aDPInstanceID;
	public Integer factAcctID;
	public Integer pAReportLineID;
	public Integer recordID;

	public TReportPK() {
	}

	public TReportPK(String str) {
		fromString(str);
	}

	public Integer getADPInstanceID() {
		return aDPInstanceID;
	}

	public void setADPInstanceID(Integer aDPInstanceID) {
		this.aDPInstanceID = aDPInstanceID;
	}

	public Integer getFactAcctID() {
		return factAcctID;
	}

	public void setFactAcctID(Integer factAcctID) {
		this.factAcctID = factAcctID;
	}

	public Integer getPAReportLineID() {
		return pAReportLineID;
	}

	public void setPAReportLineID(Integer pAReportLineID) {
		this.pAReportLineID = pAReportLineID;
	}

	public Integer getRecordID() {
		return recordID;
	}

	public void setRecordID(Integer recordID) {
		this.recordID = recordID;
	}

	public String toString() {
		return String.valueOf(aDPInstanceID)
			+ "::" + String.valueOf(factAcctID)
			+ "::" + String.valueOf(pAReportLineID)
			+ "::" + String.valueOf(recordID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDPInstanceID == null) ? 0 : aDPInstanceID.hashCode());
		rs = rs * 37 + ((factAcctID == null) ? 0 : factAcctID.hashCode());
		rs = rs * 37 + ((pAReportLineID == null) ? 0 : pAReportLineID.hashCode());
		rs = rs * 37 + ((recordID == null) ? 0 : recordID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		TReportPK other = (TReportPK) obj;
		return ((aDPInstanceID == null && other.aDPInstanceID == null)
			|| (aDPInstanceID != null && aDPInstanceID.equals(other.aDPInstanceID)))
			&& ((factAcctID == null && other.factAcctID == null)
			|| (factAcctID != null && factAcctID.equals(other.factAcctID)))
			&& ((pAReportLineID == null && other.pAReportLineID == null)
			|| (pAReportLineID != null && pAReportLineID.equals(other.pAReportLineID)))
			&& ((recordID == null && other.recordID == null)
			|| (recordID != null && recordID.equals(other.recordID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDPInstanceID = null;
		else
			aDPInstanceID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			factAcctID = null;
		else
			factAcctID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			pAReportLineID = null;
		else
			pAReportLineID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			recordID = null;
		else
			recordID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}