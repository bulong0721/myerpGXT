package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.MCost
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class MCostPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.MCost"); }
		catch(Exception e) {}
	}

	public Integer adClientId;
	public Integer adOrgId;
	public Integer cAcctschemaId;
	public Integer mAttributesetinstanceId;
	public Integer mCostelementId;
	public Integer mCosttypeId;
	public Integer mProductId;

	public MCostPK() {
	}

	public MCostPK(String str) {
		fromString(str);
	}

	public Integer getAdClientId() {
		return adClientId;
	}

	public void setAdClientId(Integer adClientId) {
		this.adClientId = adClientId;
	}

	public Integer getAdOrgId() {
		return adOrgId;
	}

	public void setAdOrgId(Integer adOrgId) {
		this.adOrgId = adOrgId;
	}

	public Integer getCAcctschemaId() {
		return cAcctschemaId;
	}

	public void setCAcctschemaId(Integer cAcctschemaId) {
		this.cAcctschemaId = cAcctschemaId;
	}

	public Integer getMAttributesetinstanceId() {
		return mAttributesetinstanceId;
	}

	public void setMAttributesetinstanceId(Integer mAttributesetinstanceId) {
		this.mAttributesetinstanceId = mAttributesetinstanceId;
	}

	public Integer getMCostelementId() {
		return mCostelementId;
	}

	public void setMCostelementId(Integer mCostelementId) {
		this.mCostelementId = mCostelementId;
	}

	public Integer getMCosttypeId() {
		return mCosttypeId;
	}

	public void setMCosttypeId(Integer mCosttypeId) {
		this.mCosttypeId = mCosttypeId;
	}

	public Integer getMProductId() {
		return mProductId;
	}

	public void setMProductId(Integer mProductId) {
		this.mProductId = mProductId;
	}

	public String toString() {
		return String.valueOf(adClientId)
			+ "::" + String.valueOf(adOrgId)
			+ "::" + String.valueOf(cAcctschemaId)
			+ "::" + String.valueOf(mAttributesetinstanceId)
			+ "::" + String.valueOf(mCostelementId)
			+ "::" + String.valueOf(mCosttypeId)
			+ "::" + String.valueOf(mProductId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((adClientId == null) ? 0 : adClientId.hashCode());
		rs = rs * 37 + ((adOrgId == null) ? 0 : adOrgId.hashCode());
		rs = rs * 37 + ((cAcctschemaId == null) ? 0 : cAcctschemaId.hashCode());
		rs = rs * 37 + ((mAttributesetinstanceId == null) ? 0 : mAttributesetinstanceId.hashCode());
		rs = rs * 37 + ((mCostelementId == null) ? 0 : mCostelementId.hashCode());
		rs = rs * 37 + ((mCosttypeId == null) ? 0 : mCosttypeId.hashCode());
		rs = rs * 37 + ((mProductId == null) ? 0 : mProductId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		MCostPK other = (MCostPK) obj;
		return ((adClientId == null && other.adClientId == null)
			|| (adClientId != null && adClientId.equals(other.adClientId)))
			&& ((adOrgId == null && other.adOrgId == null)
			|| (adOrgId != null && adOrgId.equals(other.adOrgId)))
			&& ((cAcctschemaId == null && other.cAcctschemaId == null)
			|| (cAcctschemaId != null && cAcctschemaId.equals(other.cAcctschemaId)))
			&& ((mAttributesetinstanceId == null && other.mAttributesetinstanceId == null)
			|| (mAttributesetinstanceId != null && mAttributesetinstanceId.equals(other.mAttributesetinstanceId)))
			&& ((mCostelementId == null && other.mCostelementId == null)
			|| (mCostelementId != null && mCostelementId.equals(other.mCostelementId)))
			&& ((mCosttypeId == null && other.mCosttypeId == null)
			|| (mCosttypeId != null && mCosttypeId.equals(other.mCosttypeId)))
			&& ((mProductId == null && other.mProductId == null)
			|| (mProductId != null && mProductId.equals(other.mProductId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adClientId = null;
		else
			adClientId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adOrgId = null;
		else
			adOrgId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cAcctschemaId = null;
		else
			cAcctschemaId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mAttributesetinstanceId = null;
		else
			mAttributesetinstanceId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mCostelementId = null;
		else
			mCostelementId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mCosttypeId = null;
		else
			mCosttypeId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mProductId = null;
		else
			mProductId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}