package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.MCost
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class MCostPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.MCost"); }
		catch(Exception e) {}
	}

	public Integer aDClientID;
	public Integer aDOrgID;
	public Integer cAcctSchemaID;
	public Integer mAttributeSetInstanceID;
	public Integer mCostElementID;
	public Integer mCostTypeID;
	public Integer mProductID;

	public MCostPK() {
	}

	public MCostPK(String str) {
		fromString(str);
	}

	public Integer getADClientID() {
		return aDClientID;
	}

	public void setADClientID(Integer aDClientID) {
		this.aDClientID = aDClientID;
	}

	public Integer getADOrgID() {
		return aDOrgID;
	}

	public void setADOrgID(Integer aDOrgID) {
		this.aDOrgID = aDOrgID;
	}

	public Integer getCAcctSchemaID() {
		return cAcctSchemaID;
	}

	public void setCAcctSchemaID(Integer cAcctSchemaID) {
		this.cAcctSchemaID = cAcctSchemaID;
	}

	public Integer getMAttributeSetInstanceID() {
		return mAttributeSetInstanceID;
	}

	public void setMAttributeSetInstanceID(Integer mAttributeSetInstanceID) {
		this.mAttributeSetInstanceID = mAttributeSetInstanceID;
	}

	public Integer getMCostElementID() {
		return mCostElementID;
	}

	public void setMCostElementID(Integer mCostElementID) {
		this.mCostElementID = mCostElementID;
	}

	public Integer getMCostTypeID() {
		return mCostTypeID;
	}

	public void setMCostTypeID(Integer mCostTypeID) {
		this.mCostTypeID = mCostTypeID;
	}

	public Integer getMProductID() {
		return mProductID;
	}

	public void setMProductID(Integer mProductID) {
		this.mProductID = mProductID;
	}

	public String toString() {
		return String.valueOf(aDClientID)
			+ "::" + String.valueOf(aDOrgID)
			+ "::" + String.valueOf(cAcctSchemaID)
			+ "::" + String.valueOf(mAttributeSetInstanceID)
			+ "::" + String.valueOf(mCostElementID)
			+ "::" + String.valueOf(mCostTypeID)
			+ "::" + String.valueOf(mProductID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDClientID == null) ? 0 : aDClientID.hashCode());
		rs = rs * 37 + ((aDOrgID == null) ? 0 : aDOrgID.hashCode());
		rs = rs * 37 + ((cAcctSchemaID == null) ? 0 : cAcctSchemaID.hashCode());
		rs = rs * 37 + ((mAttributeSetInstanceID == null) ? 0 : mAttributeSetInstanceID.hashCode());
		rs = rs * 37 + ((mCostElementID == null) ? 0 : mCostElementID.hashCode());
		rs = rs * 37 + ((mCostTypeID == null) ? 0 : mCostTypeID.hashCode());
		rs = rs * 37 + ((mProductID == null) ? 0 : mProductID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		MCostPK other = (MCostPK) obj;
		return ((aDClientID == null && other.aDClientID == null)
			|| (aDClientID != null && aDClientID.equals(other.aDClientID)))
			&& ((aDOrgID == null && other.aDOrgID == null)
			|| (aDOrgID != null && aDOrgID.equals(other.aDOrgID)))
			&& ((cAcctSchemaID == null && other.cAcctSchemaID == null)
			|| (cAcctSchemaID != null && cAcctSchemaID.equals(other.cAcctSchemaID)))
			&& ((mAttributeSetInstanceID == null && other.mAttributeSetInstanceID == null)
			|| (mAttributeSetInstanceID != null && mAttributeSetInstanceID.equals(other.mAttributeSetInstanceID)))
			&& ((mCostElementID == null && other.mCostElementID == null)
			|| (mCostElementID != null && mCostElementID.equals(other.mCostElementID)))
			&& ((mCostTypeID == null && other.mCostTypeID == null)
			|| (mCostTypeID != null && mCostTypeID.equals(other.mCostTypeID)))
			&& ((mProductID == null && other.mProductID == null)
			|| (mProductID != null && mProductID.equals(other.mProductID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDClientID = null;
		else
			aDClientID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDOrgID = null;
		else
			aDOrgID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cAcctSchemaID = null;
		else
			cAcctSchemaID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mAttributeSetInstanceID = null;
		else
			mAttributeSetInstanceID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mCostElementID = null;
		else
			mCostElementID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mCostTypeID = null;
		else
			mCostTypeID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mProductID = null;
		else
			mProductID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}