package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.TDistributionRunDetail
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class TDistributionRunDetailPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.TDistributionRunDetail"); }
		catch(Exception e) {}
	}

	public Integer mDistributionListID;
	public Integer mDistributionListLineID;
	public Integer mDistributionRunID;
	public Integer mDistributionRunLineID;

	public TDistributionRunDetailPK() {
	}

	public TDistributionRunDetailPK(String str) {
		fromString(str);
	}

	public Integer getMDistributionListID() {
		return mDistributionListID;
	}

	public void setMDistributionListID(Integer mDistributionListID) {
		this.mDistributionListID = mDistributionListID;
	}

	public Integer getMDistributionListLineID() {
		return mDistributionListLineID;
	}

	public void setMDistributionListLineID(Integer mDistributionListLineID) {
		this.mDistributionListLineID = mDistributionListLineID;
	}

	public Integer getMDistributionRunID() {
		return mDistributionRunID;
	}

	public void setMDistributionRunID(Integer mDistributionRunID) {
		this.mDistributionRunID = mDistributionRunID;
	}

	public Integer getMDistributionRunLineID() {
		return mDistributionRunLineID;
	}

	public void setMDistributionRunLineID(Integer mDistributionRunLineID) {
		this.mDistributionRunLineID = mDistributionRunLineID;
	}

	public String toString() {
		return String.valueOf(mDistributionListID)
			+ "::" + String.valueOf(mDistributionListLineID)
			+ "::" + String.valueOf(mDistributionRunID)
			+ "::" + String.valueOf(mDistributionRunLineID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((mDistributionListID == null) ? 0 : mDistributionListID.hashCode());
		rs = rs * 37 + ((mDistributionListLineID == null) ? 0 : mDistributionListLineID.hashCode());
		rs = rs * 37 + ((mDistributionRunID == null) ? 0 : mDistributionRunID.hashCode());
		rs = rs * 37 + ((mDistributionRunLineID == null) ? 0 : mDistributionRunLineID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		TDistributionRunDetailPK other = (TDistributionRunDetailPK) obj;
		return ((mDistributionListID == null && other.mDistributionListID == null)
			|| (mDistributionListID != null && mDistributionListID.equals(other.mDistributionListID)))
			&& ((mDistributionListLineID == null && other.mDistributionListLineID == null)
			|| (mDistributionListLineID != null && mDistributionListLineID.equals(other.mDistributionListLineID)))
			&& ((mDistributionRunID == null && other.mDistributionRunID == null)
			|| (mDistributionRunID != null && mDistributionRunID.equals(other.mDistributionRunID)))
			&& ((mDistributionRunLineID == null && other.mDistributionRunLineID == null)
			|| (mDistributionRunLineID != null && mDistributionRunLineID.equals(other.mDistributionRunLineID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mDistributionListID = null;
		else
			mDistributionListID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mDistributionListLineID = null;
		else
			mDistributionListLineID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mDistributionRunID = null;
		else
			mDistributionRunID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mDistributionRunLineID = null;
		else
			mDistributionRunLineID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}