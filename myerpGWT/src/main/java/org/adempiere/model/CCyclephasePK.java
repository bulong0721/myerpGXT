package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.CCyclephase
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class CCyclephasePK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.CCyclephase"); }
		catch(Exception e) {}
	}

	public Integer cCyclestepId;
	public Integer cPhaseId;

	public CCyclephasePK() {
	}

	public CCyclephasePK(String str) {
		fromString(str);
	}

	public Integer getCCyclestepId() {
		return cCyclestepId;
	}

	public void setCCyclestepId(Integer cCyclestepId) {
		this.cCyclestepId = cCyclestepId;
	}

	public Integer getCPhaseId() {
		return cPhaseId;
	}

	public void setCPhaseId(Integer cPhaseId) {
		this.cPhaseId = cPhaseId;
	}

	public String toString() {
		return String.valueOf(cCyclestepId)
			+ "::" + String.valueOf(cPhaseId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((cCyclestepId == null) ? 0 : cCyclestepId.hashCode());
		rs = rs * 37 + ((cPhaseId == null) ? 0 : cPhaseId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		CCyclephasePK other = (CCyclephasePK) obj;
		return ((cCyclestepId == null && other.cCyclestepId == null)
			|| (cCyclestepId != null && cCyclestepId.equals(other.cCyclestepId)))
			&& ((cPhaseId == null && other.cPhaseId == null)
			|| (cPhaseId != null && cPhaseId.equals(other.cPhaseId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cCyclestepId = null;
		else
			cCyclestepId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cPhaseId = null;
		else
			cPhaseId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}