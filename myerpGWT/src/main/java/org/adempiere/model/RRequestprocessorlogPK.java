package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.RRequestprocessorlog
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class RRequestprocessorlogPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.RRequestprocessorlog"); }
		catch(Exception e) {}
	}

	public Integer rRequestprocessorId;
	public Integer rRequestprocessorlogId;

	public RRequestprocessorlogPK() {
	}

	public RRequestprocessorlogPK(String str) {
		fromString(str);
	}

	public Integer getRRequestprocessorId() {
		return rRequestprocessorId;
	}

	public void setRRequestprocessorId(Integer rRequestprocessorId) {
		this.rRequestprocessorId = rRequestprocessorId;
	}

	public Integer getRRequestprocessorlogId() {
		return rRequestprocessorlogId;
	}

	public void setRRequestprocessorlogId(Integer rRequestprocessorlogId) {
		this.rRequestprocessorlogId = rRequestprocessorlogId;
	}

	public String toString() {
		return String.valueOf(rRequestprocessorId)
			+ "::" + String.valueOf(rRequestprocessorlogId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((rRequestprocessorId == null) ? 0 : rRequestprocessorId.hashCode());
		rs = rs * 37 + ((rRequestprocessorlogId == null) ? 0 : rRequestprocessorlogId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		RRequestprocessorlogPK other = (RRequestprocessorlogPK) obj;
		return ((rRequestprocessorId == null && other.rRequestprocessorId == null)
			|| (rRequestprocessorId != null && rRequestprocessorId.equals(other.rRequestprocessorId)))
			&& ((rRequestprocessorlogId == null && other.rRequestprocessorlogId == null)
			|| (rRequestprocessorlogId != null && rRequestprocessorlogId.equals(other.rRequestprocessorlogId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			rRequestprocessorId = null;
		else
			rRequestprocessorId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			rRequestprocessorlogId = null;
		else
			rRequestprocessorlogId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}