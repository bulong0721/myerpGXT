package org.adempiere.model;

import javax.persistence.*;

/**
 * Auto-generated by:
 * org.adempiere.AdempiereCustomizer
 */
@Entity
@Table(name="ad_printformatitem")
public class ADPrintFormatItem extends org.adempiere.common.ADEntityBase {
	private static final long serialVersionUID = 1L;
	private Integer aDClientID;
	private Integer aDColumnID;
	private Integer aDOrgID;
	private Integer aDPrintColorID;
	private Integer aDPrintFontID;
	private Integer aDPrintFormatChildID;
	private Integer aDPrintFormatID;
	private Integer aDPrintFormatItemID;
	private Integer aDPrintGraphID;
	private Boolean active;
	private Integer arcDiameter;
	private Boolean averaged;
	private String barcodeType;
	private Integer belowColumn;
	private Boolean centrallyMaintained;
	private Boolean counted;
	private String created;
	private Integer createdBy;
	private Boolean deviationCalc;
	private String fieldAlignmentType;
	private Boolean filledRectangle;
	private Boolean fixedWidth;
	private String formatPattern;
	private Boolean groupBy;
	private Boolean heightOneLine;
	private Boolean imageField;
	private Boolean imageIsAttached;
	private String imageURL;
	private String lineAlignmentType;
	private Integer lineWidth;
	private Boolean maxCalc;
	private Integer maxHeight;
	private Integer maxWidth;
	private Boolean minCalc;
	private String name;
	private Boolean nextLine;
	private Boolean nextPage;
	private Boolean orderBy;
	private Boolean pageBreak;
	private String printAreaType;
	private String printFormatType;
	private String printName;
	private String printNameSuffix;
	private Boolean printed;
	private Boolean relativePosition;
	private Boolean runningTotal;
	private Integer runningTotalLines;
	private Integer seqNo;
	private Boolean setNLPosition;
	private String shapeType;
	private Integer sortNo;
	private Boolean summarized;
	private Boolean suppressNull;
	private Boolean suppressRepeats;
	private String updated;
	private Integer updatedBy;
	private Boolean varianceCalc;
	private Integer xPosition;
	private Integer xSpace;
	private Integer yPosition;
	private Integer ySpace;

	public ADPrintFormatItem() {
	}

	public ADPrintFormatItem(Integer aDPrintFormatItemID) {
		this.aDPrintFormatItemID = aDPrintFormatItemID;
	}

	@Basic
	@Column(name="AD_CLIENT_ID", columnDefinition="INT", nullable=false)
	public Integer getADClientID() {
		return aDClientID;
	}

	public void setADClientID(Integer aDClientID) {
		this.aDClientID = aDClientID;
	}

	@Basic
	@Column(name="AD_COLUMN_ID", columnDefinition="INT")
	public Integer getADColumnID() {
		return aDColumnID;
	}

	public void setADColumnID(Integer aDColumnID) {
		this.aDColumnID = aDColumnID;
	}

	@Basic
	@Column(name="AD_ORG_ID", columnDefinition="INT", nullable=false)
	public Integer getADOrgID() {
		return aDOrgID;
	}

	public void setADOrgID(Integer aDOrgID) {
		this.aDOrgID = aDOrgID;
	}

	@Basic
	@Column(name="AD_PRINTCOLOR_ID", columnDefinition="INT")
	public Integer getADPrintColorID() {
		return aDPrintColorID;
	}

	public void setADPrintColorID(Integer aDPrintColorID) {
		this.aDPrintColorID = aDPrintColorID;
	}

	@Basic
	@Column(name="AD_PRINTFONT_ID", columnDefinition="INT")
	public Integer getADPrintFontID() {
		return aDPrintFontID;
	}

	public void setADPrintFontID(Integer aDPrintFontID) {
		this.aDPrintFontID = aDPrintFontID;
	}

	@Basic
	@Column(name="AD_PRINTFORMATCHILD_ID", columnDefinition="INT")
	public Integer getADPrintFormatChildID() {
		return aDPrintFormatChildID;
	}

	public void setADPrintFormatChildID(Integer aDPrintFormatChildID) {
		this.aDPrintFormatChildID = aDPrintFormatChildID;
	}

	@Basic
	@Column(name="AD_PRINTFORMAT_ID", columnDefinition="INT", nullable=false)
	public Integer getADPrintFormatID() {
		return aDPrintFormatID;
	}

	public void setADPrintFormatID(Integer aDPrintFormatID) {
		this.aDPrintFormatID = aDPrintFormatID;
	}

	@Id
	@Column(name="AD_PRINTFORMATITEM_ID", columnDefinition="INT")
	@TableGenerator(name = "PkGen_575", table = "ad_sequence", pkColumnName = "name", pkColumnValue = "AD_PrintFormatItem", valueColumnName = "currentnextsys", allocationSize = 1 )
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "PkGen_575")
	public Integer getADPrintFormatItemID() {
		return aDPrintFormatItemID;
	}

	public void setADPrintFormatItemID(Integer aDPrintFormatItemID) {
		this.aDPrintFormatItemID = aDPrintFormatItemID;
	}

	@Basic
	@Column(name="AD_PRINTGRAPH_ID", columnDefinition="INT")
	public Integer getADPrintGraphID() {
		return aDPrintGraphID;
	}

	public void setADPrintGraphID(Integer aDPrintGraphID) {
		this.aDPrintGraphID = aDPrintGraphID;
	}

	@Basic
	@Column(name="ISACTIVE", nullable=false)
	public Boolean isActive() {
		return active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	@Basic
	@Column(columnDefinition="INT")
	public Integer getArcDiameter() {
		return arcDiameter;
	}

	public void setArcDiameter(Integer arcDiameter) {
		this.arcDiameter = arcDiameter;
	}

	@Basic
	@Column(name="ISAVERAGED", nullable=false)
	public Boolean isAveraged() {
		return averaged;
	}

	public void setAveraged(Boolean averaged) {
		this.averaged = averaged;
	}

	@Basic
	@Column(length=3)
	public String getBarcodeType() {
		return barcodeType;
	}

	public void setBarcodeType(String barcodeType) {
		this.barcodeType = barcodeType;
	}

	@Basic
	@Column(columnDefinition="INT")
	public Integer getBelowColumn() {
		return belowColumn;
	}

	public void setBelowColumn(Integer belowColumn) {
		this.belowColumn = belowColumn;
	}

	@Basic
	@Column(name="ISCENTRALLYMAINTAINED", nullable=false)
	public Boolean isCentrallyMaintained() {
		return centrallyMaintained;
	}

	public void setCentrallyMaintained(Boolean centrallyMaintained) {
		this.centrallyMaintained = centrallyMaintained;
	}

	@Basic
	@Column(name="ISCOUNTED", nullable=false)
	public Boolean isCounted() {
		return counted;
	}

	public void setCounted(Boolean counted) {
		this.counted = counted;
	}

	@Basic
	@Column(columnDefinition="TIMESTAMP", nullable=false)
	public String getCreated() {
		return created;
	}

	public void setCreated(String created) {
		this.created = created;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Basic
	@Column(name="ISDEVIATIONCALC", nullable=false)
	public Boolean isDeviationCalc() {
		return deviationCalc;
	}

	public void setDeviationCalc(Boolean deviationCalc) {
		this.deviationCalc = deviationCalc;
	}

	@Basic
	@Column(nullable=false, length=1)
	public String getFieldAlignmentType() {
		return fieldAlignmentType;
	}

	public void setFieldAlignmentType(String fieldAlignmentType) {
		this.fieldAlignmentType = fieldAlignmentType;
	}

	@Basic
	@Column(name="ISFILLEDRECTANGLE", nullable=false)
	public Boolean isFilledRectangle() {
		return filledRectangle;
	}

	public void setFilledRectangle(Boolean filledRectangle) {
		this.filledRectangle = filledRectangle;
	}

	@Basic
	@Column(name="ISFIXEDWIDTH", nullable=false)
	public Boolean isFixedWidth() {
		return fixedWidth;
	}

	public void setFixedWidth(Boolean fixedWidth) {
		this.fixedWidth = fixedWidth;
	}

	@Basic
	@Column(length=22)
	public String getFormatPattern() {
		return formatPattern;
	}

	public void setFormatPattern(String formatPattern) {
		this.formatPattern = formatPattern;
	}

	@Basic
	@Column(name="ISGROUPBY", nullable=false)
	public Boolean isGroupBy() {
		return groupBy;
	}

	public void setGroupBy(Boolean groupBy) {
		this.groupBy = groupBy;
	}

	@Basic
	@Column(name="ISHEIGHTONELINE", nullable=false)
	public Boolean isHeightOneLine() {
		return heightOneLine;
	}

	public void setHeightOneLine(Boolean heightOneLine) {
		this.heightOneLine = heightOneLine;
	}

	@Basic
	@Column(name="ISIMAGEFIELD", nullable=false)
	public Boolean isImageField() {
		return imageField;
	}

	public void setImageField(Boolean imageField) {
		this.imageField = imageField;
	}

	@Basic
	@Column(nullable=false)
	public Boolean isImageIsAttached() {
		return imageIsAttached;
	}

	public void setImageIsAttached(Boolean imageIsAttached) {
		this.imageIsAttached = imageIsAttached;
	}

	@Basic
	@Column(length=120)
	public String getImageURL() {
		return imageURL;
	}

	public void setImageURL(String imageURL) {
		this.imageURL = imageURL;
	}

	@Basic
	@Column(nullable=false, length=1)
	public String getLineAlignmentType() {
		return lineAlignmentType;
	}

	public void setLineAlignmentType(String lineAlignmentType) {
		this.lineAlignmentType = lineAlignmentType;
	}

	@Basic
	@Column(columnDefinition="INT")
	public Integer getLineWidth() {
		return lineWidth;
	}

	public void setLineWidth(Integer lineWidth) {
		this.lineWidth = lineWidth;
	}

	@Basic
	@Column(name="ISMAXCALC", nullable=false)
	public Boolean isMaxCalc() {
		return maxCalc;
	}

	public void setMaxCalc(Boolean maxCalc) {
		this.maxCalc = maxCalc;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getMaxHeight() {
		return maxHeight;
	}

	public void setMaxHeight(Integer maxHeight) {
		this.maxHeight = maxHeight;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getMaxWidth() {
		return maxWidth;
	}

	public void setMaxWidth(Integer maxWidth) {
		this.maxWidth = maxWidth;
	}

	@Basic
	@Column(name="ISMINCALC", nullable=false)
	public Boolean isMinCalc() {
		return minCalc;
	}

	public void setMinCalc(Boolean minCalc) {
		this.minCalc = minCalc;
	}

	@Basic
	@Column(nullable=false, length=60)
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Basic
	@Column(name="ISNEXTLINE", nullable=false)
	public Boolean isNextLine() {
		return nextLine;
	}

	public void setNextLine(Boolean nextLine) {
		this.nextLine = nextLine;
	}

	@Basic
	@Column(name="ISNEXTPAGE", nullable=false)
	public Boolean isNextPage() {
		return nextPage;
	}

	public void setNextPage(Boolean nextPage) {
		this.nextPage = nextPage;
	}

	@Basic
	@Column(name="ISORDERBY", nullable=false)
	public Boolean isOrderBy() {
		return orderBy;
	}

	public void setOrderBy(Boolean orderBy) {
		this.orderBy = orderBy;
	}

	@Basic
	@Column(name="ISPAGEBREAK", nullable=false)
	public Boolean isPageBreak() {
		return pageBreak;
	}

	public void setPageBreak(Boolean pageBreak) {
		this.pageBreak = pageBreak;
	}

	@Basic
	@Column(nullable=false, length=1)
	public String getPrintAreaType() {
		return printAreaType;
	}

	public void setPrintAreaType(String printAreaType) {
		this.printAreaType = printAreaType;
	}

	@Basic
	@Column(nullable=false, length=1)
	public String getPrintFormatType() {
		return printFormatType;
	}

	public void setPrintFormatType(String printFormatType) {
		this.printFormatType = printFormatType;
	}

	@Basic
	@Column(length=2000)
	public String getPrintName() {
		return printName;
	}

	public void setPrintName(String printName) {
		this.printName = printName;
	}

	@Basic
	@Column(length=60)
	public String getPrintNameSuffix() {
		return printNameSuffix;
	}

	public void setPrintNameSuffix(String printNameSuffix) {
		this.printNameSuffix = printNameSuffix;
	}

	@Basic
	@Column(name="ISPRINTED", nullable=false)
	public Boolean isPrinted() {
		return printed;
	}

	public void setPrinted(Boolean printed) {
		this.printed = printed;
	}

	@Basic
	@Column(name="ISRELATIVEPOSITION", nullable=false)
	public Boolean isRelativePosition() {
		return relativePosition;
	}

	public void setRelativePosition(Boolean relativePosition) {
		this.relativePosition = relativePosition;
	}

	@Basic
	@Column(name="ISRUNNINGTOTAL", nullable=false)
	public Boolean isRunningTotal() {
		return runningTotal;
	}

	public void setRunningTotal(Boolean runningTotal) {
		this.runningTotal = runningTotal;
	}

	@Basic
	@Column(columnDefinition="INT")
	public Integer getRunningTotalLines() {
		return runningTotalLines;
	}

	public void setRunningTotalLines(Integer runningTotalLines) {
		this.runningTotalLines = runningTotalLines;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getSeqNo() {
		return seqNo;
	}

	public void setSeqNo(Integer seqNo) {
		this.seqNo = seqNo;
	}

	@Basic
	@Column(name="ISSETNLPOSITION", nullable=false)
	public Boolean isSetNLPosition() {
		return setNLPosition;
	}

	public void setSetNLPosition(Boolean setNLPosition) {
		this.setNLPosition = setNLPosition;
	}

	@Basic
	@Column(length=1)
	public String getShapeType() {
		return shapeType;
	}

	public void setShapeType(String shapeType) {
		this.shapeType = shapeType;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getSortNo() {
		return sortNo;
	}

	public void setSortNo(Integer sortNo) {
		this.sortNo = sortNo;
	}

	@Basic
	@Column(name="ISSUMMARIZED", nullable=false)
	public Boolean isSummarized() {
		return summarized;
	}

	public void setSummarized(Boolean summarized) {
		this.summarized = summarized;
	}

	@Basic
	@Column(name="ISSUPPRESSNULL", nullable=false)
	public Boolean isSuppressNull() {
		return suppressNull;
	}

	public void setSuppressNull(Boolean suppressNull) {
		this.suppressNull = suppressNull;
	}

	@Basic
	@Column(name="ISSUPPRESSREPEATS", nullable=false)
	public Boolean isSuppressRepeats() {
		return suppressRepeats;
	}

	public void setSuppressRepeats(Boolean suppressRepeats) {
		this.suppressRepeats = suppressRepeats;
	}

	@Basic
	@Column(columnDefinition="TIMESTAMP", nullable=false)
	public String getUpdated() {
		return updated;
	}

	public void setUpdated(String updated) {
		this.updated = updated;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getUpdatedBy() {
		return updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Basic
	@Column(name="ISVARIANCECALC", nullable=false)
	public Boolean isVarianceCalc() {
		return varianceCalc;
	}

	public void setVarianceCalc(Boolean varianceCalc) {
		this.varianceCalc = varianceCalc;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getXPosition() {
		return xPosition;
	}

	public void setXPosition(Integer xPosition) {
		this.xPosition = xPosition;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getXSpace() {
		return xSpace;
	}

	public void setXSpace(Integer xSpace) {
		this.xSpace = xSpace;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getYPosition() {
		return yPosition;
	}

	public void setYPosition(Integer yPosition) {
		this.yPosition = yPosition;
	}

	@Basic
	@Column(columnDefinition="INT", nullable=false)
	public Integer getYSpace() {
		return ySpace;
	}

	public void setYSpace(Integer ySpace) {
		this.ySpace = ySpace;
	}
}