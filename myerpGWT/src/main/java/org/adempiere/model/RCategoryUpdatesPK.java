package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.RCategoryUpdates
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class RCategoryUpdatesPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.RCategoryUpdates"); }
		catch(Exception e) {}
	}

	public Integer aDUserID;
	public Integer rCategoryID;

	public RCategoryUpdatesPK() {
	}

	public RCategoryUpdatesPK(String str) {
		fromString(str);
	}

	public Integer getADUserID() {
		return aDUserID;
	}

	public void setADUserID(Integer aDUserID) {
		this.aDUserID = aDUserID;
	}

	public Integer getRCategoryID() {
		return rCategoryID;
	}

	public void setRCategoryID(Integer rCategoryID) {
		this.rCategoryID = rCategoryID;
	}

	public String toString() {
		return String.valueOf(aDUserID)
			+ "::" + String.valueOf(rCategoryID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDUserID == null) ? 0 : aDUserID.hashCode());
		rs = rs * 37 + ((rCategoryID == null) ? 0 : rCategoryID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		RCategoryUpdatesPK other = (RCategoryUpdatesPK) obj;
		return ((aDUserID == null && other.aDUserID == null)
			|| (aDUserID != null && aDUserID.equals(other.aDUserID)))
			&& ((rCategoryID == null && other.rCategoryID == null)
			|| (rCategoryID != null && rCategoryID.equals(other.rCategoryID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDUserID = null;
		else
			aDUserID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			rCategoryID = null;
		else
			rCategoryID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}