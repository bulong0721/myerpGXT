package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.RCategoryupdates
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class RCategoryupdatesPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.RCategoryupdates"); }
		catch(Exception e) {}
	}

	public Integer adUserId;
	public Integer rCategoryId;

	public RCategoryupdatesPK() {
	}

	public RCategoryupdatesPK(String str) {
		fromString(str);
	}

	public Integer getAdUserId() {
		return adUserId;
	}

	public void setAdUserId(Integer adUserId) {
		this.adUserId = adUserId;
	}

	public Integer getRCategoryId() {
		return rCategoryId;
	}

	public void setRCategoryId(Integer rCategoryId) {
		this.rCategoryId = rCategoryId;
	}

	public String toString() {
		return String.valueOf(adUserId)
			+ "::" + String.valueOf(rCategoryId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((adUserId == null) ? 0 : adUserId.hashCode());
		rs = rs * 37 + ((rCategoryId == null) ? 0 : rCategoryId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		RCategoryupdatesPK other = (RCategoryupdatesPK) obj;
		return ((adUserId == null && other.adUserId == null)
			|| (adUserId != null && adUserId.equals(other.adUserId)))
			&& ((rCategoryId == null && other.rCategoryId == null)
			|| (rCategoryId != null && rCategoryId.equals(other.rCategoryId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adUserId = null;
		else
			adUserId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			rCategoryId = null;
		else
			rCategoryId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}