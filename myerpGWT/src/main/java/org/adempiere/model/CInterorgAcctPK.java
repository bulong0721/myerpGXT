package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.CInterorgAcct
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class CInterorgAcctPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.CInterorgAcct"); }
		catch(Exception e) {}
	}

	public Integer adOrgId;
	public Integer adOrgtoId;
	public Integer cAcctschemaId;

	public CInterorgAcctPK() {
	}

	public CInterorgAcctPK(String str) {
		fromString(str);
	}

	public Integer getAdOrgId() {
		return adOrgId;
	}

	public void setAdOrgId(Integer adOrgId) {
		this.adOrgId = adOrgId;
	}

	public Integer getAdOrgtoId() {
		return adOrgtoId;
	}

	public void setAdOrgtoId(Integer adOrgtoId) {
		this.adOrgtoId = adOrgtoId;
	}

	public Integer getCAcctschemaId() {
		return cAcctschemaId;
	}

	public void setCAcctschemaId(Integer cAcctschemaId) {
		this.cAcctschemaId = cAcctschemaId;
	}

	public String toString() {
		return String.valueOf(adOrgId)
			+ "::" + String.valueOf(adOrgtoId)
			+ "::" + String.valueOf(cAcctschemaId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((adOrgId == null) ? 0 : adOrgId.hashCode());
		rs = rs * 37 + ((adOrgtoId == null) ? 0 : adOrgtoId.hashCode());
		rs = rs * 37 + ((cAcctschemaId == null) ? 0 : cAcctschemaId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		CInterorgAcctPK other = (CInterorgAcctPK) obj;
		return ((adOrgId == null && other.adOrgId == null)
			|| (adOrgId != null && adOrgId.equals(other.adOrgId)))
			&& ((adOrgtoId == null && other.adOrgtoId == null)
			|| (adOrgtoId != null && adOrgtoId.equals(other.adOrgtoId)))
			&& ((cAcctschemaId == null && other.cAcctschemaId == null)
			|| (cAcctschemaId != null && cAcctschemaId.equals(other.cAcctschemaId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adOrgId = null;
		else
			adOrgId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adOrgtoId = null;
		else
			adOrgtoId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			cAcctschemaId = null;
		else
			cAcctschemaId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}