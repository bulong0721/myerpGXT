package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.AdSequenceNo
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class AdSequenceNoPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.AdSequenceNo"); }
		catch(Exception e) {}
	}

	public Integer adSequenceId;
	public String calendaryear;

	public AdSequenceNoPK() {
	}

	public AdSequenceNoPK(String str) {
		fromString(str);
	}

	public Integer getAdSequenceId() {
		return adSequenceId;
	}

	public void setAdSequenceId(Integer adSequenceId) {
		this.adSequenceId = adSequenceId;
	}

	public String getCalendaryear() {
		return calendaryear;
	}

	public void setCalendaryear(String calendaryear) {
		this.calendaryear = calendaryear;
	}

	public String toString() {
		return String.valueOf(adSequenceId)
			+ "::" + calendaryear;
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((adSequenceId == null) ? 0 : adSequenceId.hashCode());
		rs = rs * 37 + ((calendaryear == null) ? 0 : calendaryear.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		AdSequenceNoPK other = (AdSequenceNoPK) obj;
		return ((adSequenceId == null && other.adSequenceId == null)
			|| (adSequenceId != null && adSequenceId.equals(other.adSequenceId)))
			&& ((calendaryear == null && other.calendaryear == null)
			|| (calendaryear != null && calendaryear.equals(other.calendaryear)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			adSequenceId = null;
		else
			adSequenceId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			calendaryear = null;
		else
			calendaryear = str;
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}