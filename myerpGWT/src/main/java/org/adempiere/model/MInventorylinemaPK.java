package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.MInventorylinema
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class MInventorylinemaPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.MInventorylinema"); }
		catch(Exception e) {}
	}

	public Integer mAttributesetinstanceId;
	public Integer mInventorylineId;

	public MInventorylinemaPK() {
	}

	public MInventorylinemaPK(String str) {
		fromString(str);
	}

	public Integer getMAttributesetinstanceId() {
		return mAttributesetinstanceId;
	}

	public void setMAttributesetinstanceId(Integer mAttributesetinstanceId) {
		this.mAttributesetinstanceId = mAttributesetinstanceId;
	}

	public Integer getMInventorylineId() {
		return mInventorylineId;
	}

	public void setMInventorylineId(Integer mInventorylineId) {
		this.mInventorylineId = mInventorylineId;
	}

	public String toString() {
		return String.valueOf(mAttributesetinstanceId)
			+ "::" + String.valueOf(mInventorylineId);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((mAttributesetinstanceId == null) ? 0 : mAttributesetinstanceId.hashCode());
		rs = rs * 37 + ((mInventorylineId == null) ? 0 : mInventorylineId.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		MInventorylinemaPK other = (MInventorylinemaPK) obj;
		return ((mAttributesetinstanceId == null && other.mAttributesetinstanceId == null)
			|| (mAttributesetinstanceId != null && mAttributesetinstanceId.equals(other.mAttributesetinstanceId)))
			&& ((mInventorylineId == null && other.mInventorylineId == null)
			|| (mInventorylineId != null && mInventorylineId.equals(other.mInventorylineId)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mAttributesetinstanceId = null;
		else
			mAttributesetinstanceId = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mInventorylineId = null;
		else
			mInventorylineId = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}