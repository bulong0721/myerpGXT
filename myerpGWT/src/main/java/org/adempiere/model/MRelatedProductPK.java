package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.MRelatedProduct
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class MRelatedProductPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.MRelatedProduct"); }
		catch(Exception e) {}
	}

	public Integer mProductID;
	public Integer relatedProductID;
	public String relatedProductType;

	public MRelatedProductPK() {
	}

	public MRelatedProductPK(String str) {
		fromString(str);
	}

	public Integer getMProductID() {
		return mProductID;
	}

	public void setMProductID(Integer mProductID) {
		this.mProductID = mProductID;
	}

	public Integer getRelatedProductID() {
		return relatedProductID;
	}

	public void setRelatedProductID(Integer relatedProductID) {
		this.relatedProductID = relatedProductID;
	}

	public String getRelatedProductType() {
		return relatedProductType;
	}

	public void setRelatedProductType(String relatedProductType) {
		this.relatedProductType = relatedProductType;
	}

	public String toString() {
		return String.valueOf(mProductID)
			+ "::" + String.valueOf(relatedProductID)
			+ "::" + relatedProductType;
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((mProductID == null) ? 0 : mProductID.hashCode());
		rs = rs * 37 + ((relatedProductID == null) ? 0 : relatedProductID.hashCode());
		rs = rs * 37 + ((relatedProductType == null) ? 0 : relatedProductType.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		MRelatedProductPK other = (MRelatedProductPK) obj;
		return ((mProductID == null && other.mProductID == null)
			|| (mProductID != null && mProductID.equals(other.mProductID)))
			&& ((relatedProductID == null && other.relatedProductID == null)
			|| (relatedProductID != null && relatedProductID.equals(other.relatedProductID)))
			&& ((relatedProductType == null && other.relatedProductType == null)
			|| (relatedProductType != null && relatedProductType.equals(other.relatedProductType)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mProductID = null;
		else
			mProductID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			relatedProductID = null;
		else
			relatedProductID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			relatedProductType = null;
		else
			relatedProductType = str;
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}