package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.ADSequenceNo
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class ADSequenceNoPK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.ADSequenceNo"); }
		catch(Exception e) {}
	}

	public Integer aDSequenceID;
	public String calendarYear;

	public ADSequenceNoPK() {
	}

	public ADSequenceNoPK(String str) {
		fromString(str);
	}

	public Integer getADSequenceID() {
		return aDSequenceID;
	}

	public void setADSequenceID(Integer aDSequenceID) {
		this.aDSequenceID = aDSequenceID;
	}

	public String getCalendarYear() {
		return calendarYear;
	}

	public void setCalendarYear(String calendarYear) {
		this.calendarYear = calendarYear;
	}

	public String toString() {
		return String.valueOf(aDSequenceID)
			+ "::" + calendarYear;
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((aDSequenceID == null) ? 0 : aDSequenceID.hashCode());
		rs = rs * 37 + ((calendarYear == null) ? 0 : calendarYear.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		ADSequenceNoPK other = (ADSequenceNoPK) obj;
		return ((aDSequenceID == null && other.aDSequenceID == null)
			|| (aDSequenceID != null && aDSequenceID.equals(other.aDSequenceID)))
			&& ((calendarYear == null && other.calendarYear == null)
			|| (calendarYear != null && calendarYear.equals(other.calendarYear)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			aDSequenceID = null;
		else
			aDSequenceID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			calendarYear = null;
		else
			calendarYear = str;
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}