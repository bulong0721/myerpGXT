package org.adempiere.model;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: org.adempiere.model.MAttributeUse
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class MAttributeUsePK implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("org.adempiere.model.MAttributeUse"); }
		catch(Exception e) {}
	}

	public Integer mAttributeID;
	public Integer mAttributeSetID;

	public MAttributeUsePK() {
	}

	public MAttributeUsePK(String str) {
		fromString(str);
	}

	public Integer getMAttributeID() {
		return mAttributeID;
	}

	public void setMAttributeID(Integer mAttributeID) {
		this.mAttributeID = mAttributeID;
	}

	public Integer getMAttributeSetID() {
		return mAttributeSetID;
	}

	public void setMAttributeSetID(Integer mAttributeSetID) {
		this.mAttributeSetID = mAttributeSetID;
	}

	public String toString() {
		return String.valueOf(mAttributeID)
			+ "::" + String.valueOf(mAttributeSetID);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((mAttributeID == null) ? 0 : mAttributeID.hashCode());
		rs = rs * 37 + ((mAttributeSetID == null) ? 0 : mAttributeSetID.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		MAttributeUsePK other = (MAttributeUsePK) obj;
		return ((mAttributeID == null && other.mAttributeID == null)
			|| (mAttributeID != null && mAttributeID.equals(other.mAttributeID)))
			&& ((mAttributeSetID == null && other.mAttributeSetID == null)
			|| (mAttributeSetID != null && mAttributeSetID.equals(other.mAttributeSetID)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mAttributeID = null;
		else
			mAttributeID = new Integer(str);
		str = toke.nextToken();
		if("null".equals(str))
			mAttributeSetID = null;
		else
			mAttributeSetID = new Integer(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}